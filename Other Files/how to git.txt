**new this year: branching!**
//---branching philosophy---//
(will be better defined after we discuss it)
'master' branch should always be our best stable version, and be the one up on the site
'dev' branch is what we branch, merge, merge-request, etc on to improve the bot. will be pushed to master only when stable and better
create new branches for new features! for example 'mobile-turrets'
	make changes and add cool things on that branch. does NOT have to be be bug-free!
	submit pull request back into 'dev' ONLY WHEN IT *IS* BUG FREE (and has been merged with the current 'dev' version)
note1: this is not actually as complicated as we thought. yay
note2: branches like 'nav' will probably be used throughout. same rules apply: does not have to be bug free, but do pull requests when it is

//---commands---------------//
git branch <branch name> //creates new branch **DO NEXT TWO COMMANDS IMMEDIATELY after you do this one**
git checkout <branch name> //switch to that branch. (master is the main original one)
git push --set-upstream origin <current branch name> //makes pushing and pulling use current branch on GitHub by default (always do this for new branches)
git merge origin/<diff branch> //update current branch with changes from <diff branch> (effectively 'pull' but from <diff branch> instead of <current branch>) *will usually be origin/dev since that's what we'll be actively working on

// how to push changes made in a branch back to its parent branch! (usually 'dev') (for when you are done with the feature being developed in that branch)
1) git merge origin/<parent branch>
2) //resolve conflicts and stuff the usual way
3) GO TO THE REPO ONLINE and submit a pull request **make sure you are merging into the correct branch (not usually master!)**

ONLY WHEN THERE ARE NO BUGS IN YOUR CODE

//---all this from last year still applies within each branch---//
For all your gitlab testing needs!
step 1) cd into battlecode-2017, navigate to the proper branch, and TYPE git pull
step 2) make your changes
step 3) TYPE git add [name of file you changed] (or -A for all)
step 4) TYPE git commit -m "[insert descriptive message about what you did]"
step 5) TYPE git pull
step 6) TYPE git push

Possible errors:
step 5b) CONFLICT automatic merge failed //This means some doofus was editing the same code you were editing. Now its YOUR job to fix it before others mess it up even more!
step 5c) to edit TYPE vi [name of file with errors]
step 5b) fix all the errors, it should label who made what changes
step 5c) GO to step 3)
step 5d) try TYPING git pull //if you did your job correctly it should be error free now

step 4b) //You found yourself in some scary screen cuz u didnt add a message
step 4c) ESC :q!
step 4d) try step 4 again...

step 6)Rejected! Start at step 1 again :)